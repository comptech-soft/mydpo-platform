<?php

namespace MyDpo\Models\Livrabile;

use Illuminate\Database\Eloquent\Model;
// use Illuminate\Validation\Rule;
use MyDpo\Traits\Itemable;
use MyDpo\Traits\Actionable;
use MyDpo\Traits\Admin\Livrabile\Tipuri\Centralizatorable;
use MyDpo\Scopes\NotdeletedScope;

// use MyDpo\Performers\Registru\SaveCustomerAsociere;

class TipRegistru extends Model {

    use Itemable, Actionable, Centralizatorable;

    

    

    

    // protected $appends = [
    //     'human_type'
    // ];


    

 

    // public function getHumanTypeAttribute() {
    //     if($this->type == 'registre')
    //     {
    //         return [
    //             'caption' => 'Registru',
    //             'color' => 'cyan',
    //         ];
    //     }

    //     return [
    //         'caption' => 'Audit',
    //         'color' => 'purple',
    //     ];
    // }
   
    // public function getColumnsAttribute() {
    //     $t = $this->coloane->filter( function($item) {
    //         if($item->is_group == 1)
    //         {
    //             return TRUE;
    //         }

    //         if($item->is_group == 0 && $item->group_id == 0)
    //         {
    //             return TRUE;
    //         }
    //         return FALSE;
    //     })->map(function($item) {
    //         $item->column_type = $item->is_group == 1 ? 'group' : 'single';
    //         return $item;
    //     })->sortBy('order_no')->toArray();

    //     $r = [];
    //     foreach($t as $i => $item)
    //     {
    //         $r[]  = $item;
    //     }
       
    //     foreach($r as $i => $record)
    //     {
    //         $r[$i]['children'] = [];
    //         if($record['is_group'] == 1)
    //         {
    //             $children = $this->coloane->filter( function($item) use ($record) {
    //                 if($item->group_id == $record['id'])
    //                 {
    //                     return TRUE;
    //                 }
    //                 return FALSE;
    //             })->sortBy('order_no')->toArray();

    //             foreach($children as $j => $child)
    //             {
    //                 $r[$i]['children'][] = $child;
    //             }
    //         }
    //     }

    //     return $r;
    // }

    // function coloane() {
    //     return $this->hasMany(RegistruColoana::class, 'register_id');
    // }

    
    
    
    // public static function PrepareActionInput($action, $input) {
    //     if($action == 'insert')
    //     {
    //         $input['slug'] = \Str::slug($input['name']); 
    //         $input['description'] = '-'; 
            
    //     }
    //     return $input;
    // }

   

    

}